import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';

import '../constants/strings.dart';
import '../kern/theme/app_text_styles.dart';
import '../kern/theme/app_colors.dart';
import '../kern/theme/app_spacing.dart';
import '../widgets/standard_button.dart';
import '../kern/theme/thema_controller.dart';

class DiagnoseFragment extends StatefulWidget {
  const DiagnoseFragment({super.key});

  @override
  State<DiagnoseFragment> createState() => _DiagnoseFragmentState();
}

class _DiagnoseFragmentState extends State<DiagnoseFragment> {
  String selectedGeraetetyp = 'Wechselrichter';
  String selectedHersteller = '';
  String selectedModell = '';
  final TextEditingController fehlercodeController = TextEditingController();
  String fehlerBeschreibung = '';
  String loesungsvorschlag = '';
  String pdfLink = '';
  bool fehlerGefunden = false;

  final List<String> komponentenListe = [
    'Wechselrichter',
    'Batterie',
    'Smart Meter',
  ];

  final Map<String, Map<String, String>> geraetetypHerstellerDateien = {
    'Wechselrichter': {
      AppStrings.herstellerSungrow:
          'assets/errors/pv/sungrow/sungrow_shxxrt_errors.json',
      AppStrings.herstellerFronius:
          'assets/errors/pv/fronius_errors_extended.json',
      AppStrings.herstellerGrowatt: 'assets/errors/pv/growatt_errors.json',
    },
    'Batterie': {
      'BatterieHersteller1': 'assets/errors/battery/hersteller1_errors.json',
      'BatterieHersteller2': 'assets/errors/battery/hersteller2_errors.json',
    },
    'Smart Meter': {
      'SmartMeterHersteller1': 'assets/errors/smartmeter/hersteller1_errors.json',
      'SmartMeterHersteller2': 'assets/errors/smartmeter/hersteller2_errors.json',
    },
  };

  List<String> verfuegbareHersteller = [];
  List<String> verfuegbareModelle = [];
  Map<String, dynamic> aktuelleDaten = {};

  @override
  void initState() {
    super.initState();
    _updateHerstellerListe();
  }

  void _updateHerstellerListe() {
    setState(() {
      selectedHersteller = '';
      selectedModell = '';
      verfuegbareHersteller =
          geraetetypHerstellerDateien[selectedGeraetetyp]?.keys.toList() ?? [];
      verfuegbareModelle = [];
      aktuelleDaten = {};
      fehlerBeschreibung = '';
      loesungsvorschlag = '';
      pdfLink = '';
      fehlerGefunden = false;
    });
  }

  Future<void> _ladeModelle(String hersteller) async {
    final pfad = geraetetypHerstellerDateien[selectedGeraetetyp]?[hersteller];
    if (pfad == null) return;

    try {
      final jsonString = await rootBundle.loadString(pfad);
      final Map<String, dynamic> daten = json.decode(jsonString);

      setState(() {
        aktuelleDaten = daten;
        verfuegbareModelle = daten.keys.toList();
        selectedModell = '';
        fehlerBeschreibung = '';
        loesungsvorschlag = '';
        pdfLink = '';
        fehlerGefunden = false;
      });
    } catch (e) {
      setState(() {
        verfuegbareModelle = [];
        aktuelleDaten = {};
        selectedModell = '';
        fehlerBeschreibung = AppStrings.fehlerBeimLaden;
        loesungsvorschlag = '';
        pdfLink = '';
        fehlerGefunden = false;
      });
    }
  }

  Future<void> fehlerAnalysieren() async {
    FocusScope.of(context).unfocus();
    final code = fehlercodeController.text.trim();
    if (code.isEmpty || selectedModell.isEmpty) return;

    final eintrag = aktuelleDaten[selectedModell]?[code];

    if (eintrag != null) {
      setState(() {
        fehlerBeschreibung = eintrag['description'] ?? AppStrings.keineDaten;
        loesungsvorschlag = eintrag['solution'] ?? AppStrings.keineDaten;
        pdfLink = eintrag['pdf'] ?? '';
        fehlerGefunden = true;
      });
      _showAnalyseDialog(code, fehlerBeschreibung, loesungsvorschlag, pdfLink);
    } else {
      setState(() {
        fehlerBeschreibung =
            '${AppStrings.fehler}: ${AppStrings.codeNichtGefunden}';
        loesungsvorschlag = '';
        pdfLink = '';
        fehlerGefunden = false;
      });
      _showAnalyseDialog(code, fehlerBeschreibung, loesungsvorschlag, pdfLink);
    }
  }

  void _showAnalyseDialog(
      String code, String beschreibung, String loesung, String pdf) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text('${AppStrings.fehler} $code Analyse'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(AppStrings.beschreibung, style: AppTextStyles.subtitle),
              const SizedBox(height: AppSpacing.xs),
              Text(beschreibung, style: AppTextStyles.body),
              const SizedBox(height: AppSpacing.md),
              Text(AppStrings.loesung, style: AppTextStyles.subtitle),
              const SizedBox(height: AppSpacing.xs),
              Text(loesung, style: AppTextStyles.body),
              if (pdf.isNotEmpty) ...[
                const SizedBox(height: AppSpacing.md),
                TextButton.icon(
                  onPressed: () async {
                    final uri = Uri.parse(pdf);
                    if (await canLaunchUrl(uri)) {
                      await launchUrl(uri);
                    }
                  },
                  icon: const Icon(Icons.picture_as_pdf),
                  label: Text(AppStrings.pdfAnleitungOeffnen,
                      style: AppTextStyles.link),
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Schlie√üen'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final thema = context.watch<ThemaController>();

    return Scaffold(
      backgroundColor: thema.isDark ? AppColors.backgroundDark : AppColors.background,
      appBar: AppBar(
        backgroundColor: thema.isDark ? AppColors.appBarDark : AppColors.appBarLight,
        iconTheme: IconThemeData(
          color: thema.isDark ? Colors.white : Colors.black,
        ),
        toolbarHeight: 70,
        title: const Text(
          AppStrings.diagnoseTitle,
          style: TextStyle(color: Colors.black, fontSize: 20),
          maxLines: 2,
          softWrap: true,
          overflow: TextOverflow.visible,
        ),
        elevation: 1,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(AppSpacing.l),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              DropdownButtonFormField<String>(
                value: selectedGeraetetyp,
                items: komponentenListe.map((komponente) {
                  return DropdownMenuItem<String>(
                    value: komponente,
                    child: Text(komponente, style: AppTextStyles.body),
                  );
                }).toList(),
                decoration: InputDecoration(
                  labelText: AppStrings.komponenteWaehlen,
                  filled: true,
                  fillColor: thema.isDark ? AppColors.inputBackgroundDark : AppColors.inputBackground,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppSpacing.sm),
                    borderSide: BorderSide.none,
                  ),
                ),
                onChanged: (newValue) {
                  setState(() {
                    selectedGeraetetyp = newValue!;
                    _updateHerstellerListe();
                  });
                },
              ),
              const SizedBox(height: AppSpacing.md),
              DropdownButtonFormField<String>(
                value: selectedHersteller.isEmpty ? null : selectedHersteller,
                items: verfuegbareHersteller.map((value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value, style: AppTextStyles.body),
                  );
                }).toList(),
                decoration: InputDecoration(
                  labelText: AppStrings.herstellerWaehlen,
                  filled: true,
                  fillColor: thema.isDark ? AppColors.inputBackgroundDark : AppColors.inputBackground,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppSpacing.sm),
                    borderSide: BorderSide.none,
                  ),
                ),
                onChanged: (newValue) {
                  setState(() {
                    selectedHersteller = newValue!;
                    _ladeModelle(selectedHersteller);
                  });
                },
              ),
              const SizedBox(height: AppSpacing.md),
              DropdownButtonFormField<String>(
                value: selectedModell.isEmpty ? null : selectedModell,
                items: verfuegbareModelle.map((modell) {
                  return DropdownMenuItem<String>(
                    value: modell,
                    child: Text(modell, style: AppTextStyles.body),
                  );
                }).toList(),
                decoration: InputDecoration(
                  labelText: AppStrings.modellWaehlen,
                  filled: true,
                  fillColor: thema.isDark ? AppColors.inputBackgroundDark : AppColors.inputBackground,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppSpacing.sm),
                    borderSide: BorderSide.none,
                  ),
                ),
                onChanged: (newValue) {
                  setState(() {
                    selectedModell = newValue!;
                    fehlerBeschreibung = '';
                    loesungsvorschlag = '';
                    pdfLink = '';
                    fehlerGefunden = false;
                    fehlercodeController.clear();
                  });
                },
              ),
              const SizedBox(height: AppSpacing.md),
              TextField(
                controller: fehlercodeController,
                decoration: InputDecoration(
                  labelText: AppStrings.fehlercodeEingeben,
                  filled: true,
                  fillColor: thema.isDark ? AppColors.inputBackgroundDark : AppColors.inputBackground,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(AppSpacing.sm),
                    borderSide: BorderSide.none,
                  ),
                ),
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: AppSpacing.l),
              StandardButton(
                label: AppStrings.fehlercodeAnalysieren,
                onPressed: fehlerAnalysieren,
              ),
              const SizedBox(height: AppSpacing.l),
              if (fehlerGefunden) ...[
                Text(
                  AppStrings.beschreibung,
                  style: AppTextStyles.subtitle,
                ),
                const SizedBox(height: AppSpacing.xs),
                Text(fehlerBeschreibung, style: AppTextStyles.body),
                const SizedBox(height: AppSpacing.md),
                Text(
                  AppStrings.loesung,
                  style: AppTextStyles.subtitle,
                ),
                const SizedBox(height: AppSpacing.xs),
                Text(loesungsvorschlag, style: AppTextStyles.body),
                const SizedBox(height: AppSpacing.md),
                if (pdfLink.isNotEmpty)
                  TextButton.icon(
                    onPressed: () async {
                      final uri = Uri.parse(pdfLink);
                      if (await canLaunchUrl(uri)) {
                        await launchUrl(uri);
                      }
                    },
                    icon: const Icon(Icons.picture_as_pdf),
                    label: Text(AppStrings.pdfAnleitungOeffnen, style: AppTextStyles.link),
                  ),
                const SizedBox(height: AppSpacing.md),
                TextButton.icon(
                  onPressed: () {
                    // Hersteller-Hotline ggf.
                  },
                  icon: const Icon(Icons.support_agent),
                  label: Text(AppStrings.herstellerHotlineKontakt, style: AppTextStyles.link),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}